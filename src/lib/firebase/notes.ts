import { db } from "./init";
import { createOperation, deleteOperation } from "./crud";
import { noteSchema } from "./schemas";
import { NoteRecord } from "@/types/notes";
import { get, ref as databaseRef, query, orderByChild, equalTo } from "firebase/database";

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞—é—â–µ–≥–æ –∑–∞–º–µ—Ç–∫—É.
 * @param title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏.
 * @param content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏.
 * @returns –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–º–µ—Ç–∫–∏.
 */
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø—É—Ç—å: src/lib/notes.ts
export const createNote = async (userId: string, title: string, content: string, day: string): Promise<NoteRecord> => { // <-- –ò–ó–ú–ï–ù–ï–ù–û
  const noteId = Date.now().toString();
  
  const recordToSave: Omit<NoteRecord, 'id'> = {
    userId,
    title,
    content,
    day, // <-- –î–û–ë–ê–í–õ–ï–ù–û
    createdAt: new Date().toISOString(),
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
  await createOperation(`notes/${noteId}`, recordToSave, noteSchema.omit({ id: true }));

  console.log(`–ó–∞–º–µ—Ç–∫–∞ ${noteId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
  
  return { id: noteId, ...recordToSave };
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∑–∞–º–µ—Ç–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º.
 */
export const getNotesForUser = async (userId: string): Promise<NoteRecord[]> => {
    // <-- LOGGING: 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–æ–±—â–µ –≤—ã–∑–≤–∞–Ω–∞ –∏ —Å –∫–∞–∫–∏–º userId
    console.log(`[FIREBASE] üöÄ getNotesForUser –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è userId: ${userId}`);
  
    const notesRef = query(databaseRef(db, 'notes'), orderByChild('userId'), equalTo(userId));
    
    try {
      const snapshot = await get(notesRef);
  
      if (!snapshot.exists()) {
        // <-- LOGGING: 2. –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç! –ï—Å–ª–∏ Firebase –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É
        console.warn(`[FIREBASE] ‚ö†Ô∏è –°–Ω–∏–º–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.`);
        return [];
      }
  
      // <-- LOGGING: 3. –°–º–æ—Ç—Ä–∏–º –Ω–∞ "—Å—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª Firebase
      const records = snapshot.val() as Record<string, Omit<NoteRecord, 'id'>>;
      console.log("[FIREBASE] üì¶ –ü–æ–ª—É—á–µ–Ω—ã —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase:", records);
      
      const results: NoteRecord[] = Object.entries(records).map(([id, data]) => ({
        id,
        ...data,
      }));
  
      // <-- LOGGING: 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤
      console.log("[FIREBASE] ‚ú® –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –º–∞—Å—Å–∏–≤:", results);
  
      const sortedResults = results.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      
      // <-- LOGGING: 5. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      console.log("[FIREBASE] ‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:", sortedResults);
      
      return sortedResults;
  
    } catch (error) {
      // <-- LOGGING: 6. –õ–æ–≤–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, "Permission Denied"
      console.error("[FIREBASE] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ get():", error);
      throw error;
    }
  };
/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –µ—ë ID.
 * @param noteId - ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
 */
export const deleteNote = async (noteId: string): Promise<void> => {
  try {
    await deleteOperation(`notes/${noteId}`);
    console.log(`–ó–∞–º–µ—Ç–∫–∞ ${noteId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.");
  }
};